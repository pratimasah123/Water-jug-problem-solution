from collections import deque

def water_jug_bfs(jug1_capacity, jug2_capacity, target):
    # Queue to store states (jug1, jug2)
    queue = deque()
    queue.append((0, 0))  # Start with both jugs empty
    
    # Set to keep track of visited states
    visited = set()
    visited.add((0, 0))
    
    # To track the path of actions
    path = []
    
    while queue:
        jug1, jug2 = queue.popleft()
        path.append((jug1, jug2))
        
        # If we reach the target amount in either jug, return the path
        if jug1 == target or jug2 == target:
            return path
        
        # Possible next states
        possible_moves = [
            (jug1_capacity, jug2),  # Fill Jug 1
            (jug1, jug2_capacity),  # Fill Jug 2
            (0, jug2),  # Empty Jug 1
            (jug1, 0),  # Empty Jug 2
            (jug1 - min(jug1, jug2_capacity - jug2), jug2 + min(jug1, jug2_capacity - jug2)),  # Pour Jug1 -> Jug2
            (jug1 + min(jug2, jug1_capacity - jug1), jug2 - min(jug2, jug1_capacity - jug1))   # Pour Jug2 -> Jug1
        ]
        
        # Process new valid states
        for move in possible_moves:
            if move not in visited:
                visited.add(move)
                queue.append(move)
    
    return "No solution found"

# Example Usage:
jug1_capacity = 4
jug2_capacity = 3
target = 2
solution = water_jug_bfs(jug1_capacity, jug2_capacity, target)
print("Solution path:", solution)
